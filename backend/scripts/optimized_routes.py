#!/usr/bin/env python3
"""
Script pour appliquer la strat√©gie optimis√©e avec 10 000 requ√™tes/mois
et gestion dynamique des routes saisonni√®res
"""

import sys
import os
from datetime import datetime
from colorama import init, Fore, Style

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app.core.database import SessionLocal
from app.services.dynamic_route_manager import DynamicRouteManager
from app.models.flight import Route, Deal
from sqlalchemy import func, and_
import json

# Initialiser les couleurs
init(autoreset=True)


def main():
    """
    Appliquer la strat√©gie optimis√©e pour 10k requ√™tes/mois
    """
    
    print(f"\n{Fore.CYAN}üöÄ OPTIMISATION DES ROUTES GLOBEGENIUS")
    print(f"{Fore.CYAN}Budget: 10 000 requ√™tes/mois (333/jour)")
    print("=" * 60)
    
    db = SessionLocal()
    manager = DynamicRouteManager(db)
    
    try:
        # 1. Analyser la situation actuelle
        print(f"\n{Fore.YELLOW}üìä Analyse de la situation actuelle...")
        analyze_current_situation(db)
        
        # 2. Calculer la distribution optimale
        print(f"\n{Fore.YELLOW}üßÆ Calcul de la distribution optimale...")
        distribution = manager.calculate_optimal_scan_distribution()
        
        # 3. Afficher le plan
        display_distribution_plan(distribution)
        
        # 4. Demander confirmation
        print(f"\n{Fore.YELLOW}‚ùì Voulez-vous appliquer cette configuration ?")
        print(f"   {Fore.RED}Attention: Cela va modifier les fr√©quences de scan de toutes les routes!")
        
        response = input(f"\n{Fore.GREEN}Confirmer (oui/non) ? ").lower()
        
        if response in ['oui', 'o', 'yes', 'y']:
            # 5. Appliquer la distribution
            print(f"\n{Fore.YELLOW}‚öôÔ∏è  Application de la nouvelle configuration...")
            success = manager.apply_distribution(distribution)
            
            if success:
                print(f"\n{Fore.GREEN}‚úÖ Configuration appliqu√©e avec succ√®s!")
                
                # 6. Cr√©er un rapport
                create_optimization_report(distribution, manager)
                
                # 7. Afficher les prochaines √©tapes
                display_next_steps()
            else:
                print(f"\n{Fore.RED}‚ùå Erreur lors de l'application de la configuration")
        else:
            print(f"\n{Fore.YELLOW}‚ùå Configuration annul√©e")
        
    finally:
        db.close()


def analyze_current_situation(db):
    """
    Analyser la configuration actuelle des routes
    """
    
    # Compter les routes par tier
    tier_counts = db.query(
        Route.tier,
        func.count(Route.id).label('count'),
        func.sum(24 / Route.scan_interval_hours).label('daily_scans')
    ).filter(Route.is_active == True).group_by(Route.tier).all()
    
    total_daily_scans = sum(tier.daily_scans or 0 for tier in tier_counts)
    
    print(f"\n{Fore.CYAN}Configuration actuelle:")
    print(f"{'Tier':<10} {'Routes':<10} {'Scans/jour':<15} {'% du total':<10}")
    print("-" * 50)
    
    for tier in tier_counts:
        percentage = (tier.daily_scans / total_daily_scans * 100) if total_daily_scans > 0 else 0
        print(f"Tier {tier.tier:<5} {tier.count:<10} {tier.daily_scans:<15.0f} {percentage:<10.1f}%")
    
    print(f"\n{Fore.YELLOW}Total: {total_daily_scans:.0f} scans/jour")
    
    if total_daily_scans > 333:
        print(f"{Fore.RED}‚ö†Ô∏è  PROBL√àME: {total_daily_scans:.0f} scans/jour > 333 (budget quotidien)")
        print(f"   D√©passement: {total_daily_scans - 333:.0f} scans/jour")
    
    # Analyser les performances r√©centes
    seven_days_ago = datetime.now().days_since(7)
    
    top_performers = db.query(
        Route.origin,
        Route.destination,
        func.count(Deal.id).label('deals')
    ).join(Deal).filter(
        Deal.detected_at >= seven_days_ago
    ).group_by(Route.origin, Route.destination).order_by(
        func.count(Deal.id).desc()
    ).limit(5).all()
    
    if top_performers:
        print(f"\n{Fore.CYAN}Top 5 routes performantes (7 derniers jours):")
        for route in top_performers:
            print(f"   {route.origin} ‚Üí {route.destination}: {route.deals} deals")


def display_distribution_plan(distribution):
    """
    Afficher le plan de distribution de mani√®re claire
    """
    
    stats = distribution['stats']
    
    print(f"\n{Fore.GREEN}‚ú® NOUVELLE DISTRIBUTION OPTIMIS√âE")
    print("=" * 60)
    
    # R√©sum√©
    print(f"\n{Fore.CYAN}R√©sum√©:")
    print(f"   Routes couvertes: {stats['routes_covered']} (sur ~90 possibles)")
    print(f"   Scans quotidiens: {stats['total_daily_scans']} (budget: 333)")
    print(f"   Routes saisonni√®res actives: {stats['seasonal_routes_count']}")
    print(f"   Couverture: {stats['coverage_percentage']:.1f}%")
    
    # Top 10 routes
    print(f"\n{Fore.CYAN}Top 10 routes prioritaires:")
    print(f"{'Route':<20} {'Scans/jour':<12} {'Intervalle':<12} {'Type':<10}")
    print("-" * 60)
    
    for i, scan in enumerate(distribution['daily_scans'][:10]):
        route_str = f"{scan['origin']} ‚Üí {scan['destination']}"
        type_str = "Saisonnier" if scan['is_seasonal'] else "R√©gulier"
        interval_str = f"{scan['scan_interval_hours']:.1f}h"
        
        # Colorer selon l'importance
        if i < 3:
            color = Fore.GREEN
        elif i < 6:
            color = Fore.YELLOW
        else:
            color = Fore.WHITE
            
        print(f"{color}{route_str:<20} {scan['daily_scans']:<12} {interval_str:<12} {type_str:<10}")
    
    # Distribution par tier
    print(f"\n{Fore.CYAN}Distribution par tier:")
    for tier, scans in stats['tier_distribution'].items():
        if scans > 0:
            percentage = (scans / stats['total_daily_scans']) * 100
            print(f"   Tier {tier}: {scans} scans/jour ({percentage:.1f}%)")
    
    # Recommandations
    if distribution['recommendations']:
        print(f"\n{Fore.YELLOW}üí° Recommandations:")
        for rec in distribution['recommendations']:
            print(f"   ‚Ä¢ {rec}")


def create_optimization_report(distribution, manager):
    """
    Cr√©er un rapport d√©taill√© de l'optimisation
    """
    
    report_path = "optimization_report.json"
    
    # Obtenir le calendrier saisonnier
    seasonal_calendar = manager.get_seasonal_calendar()
    
    # Obtenir les suggestions d'ajustement
    suggestions = manager.suggest_dynamic_adjustments()
    
    report = {
        'generated_at': datetime.now().isoformat(),
        'budget': {
            'monthly_quota': 10000,
            'daily_quota': 333,
            'daily_used': distribution['stats']['total_daily_scans']
        },
        'coverage': {
            'total_routes': distribution['total_routes'],
            'covered_routes': distribution['stats']['routes_covered'],
            'coverage_percentage': distribution['stats']['coverage_percentage']
        },
        'seasonal_routes': {
            'active_count': distribution['active_seasonal_routes'],
            'calendar': seasonal_calendar
        },
        'top_routes': [
            {
                'route': f"{scan['origin']}‚Üí{scan['destination']}",
                'daily_scans': scan['daily_scans'],
                'is_seasonal': scan['is_seasonal'],
                'priority_score': scan['priority_score']
            }
            for scan in distribution['daily_scans'][:20]
        ],
        'recommendations': distribution['recommendations'],
        'dynamic_adjustments': suggestions
    }
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\n{Fore.GREEN}üìÑ Rapport d√©taill√© cr√©√©: {report_path}")


def display_next_steps():
    """
    Afficher les prochaines √©tapes pour l'utilisateur
    """
    
    print(f"\n{Fore.CYAN}üéØ PROCHAINES √âTAPES")
    print("=" * 60)
    
    print(f"\n{Fore.YELLOW}1. Red√©marrer les services pour appliquer les changements:")
    print(f"   {Fore.WHITE}# Arr√™ter Celery (Ctrl+C)")
    print(f"   {Fore.WHITE}# Relancer:")
    print(f"   {Fore.WHITE}celery -A app.tasks.celery_app worker --loglevel=info")
    print(f"   {Fore.WHITE}celery -A app.tasks.celery_app beat --loglevel=info")
    
    print(f"\n{Fore.YELLOW}2. Monitorer les performances:")
    print(f"   {Fore.WHITE}python scripts/monitor_scanner.py")
    
    print(f"\n{Fore.YELLOW}3. Activer l'ajustement automatique (optionnel):")
    print(f"   {Fore.WHITE}python scripts/enable_auto_optimization.py")
    
    print(f"\n{Fore.YELLOW}4. Surveiller le quota quotidien:")
    print(f"   {Fore.WHITE}Le syst√®me s'arr√™tera automatiquement √† 333 requ√™tes/jour")
    
    print(f"\n{Fore.GREEN}üí° Conseils:")
    print(f"   ‚Ä¢ Les routes saisonni√®res changeront automatiquement chaque mois")
    print(f"   ‚Ä¢ V√©rifiez les performances chaque semaine")
    print(f"   ‚Ä¢ Ajustez les seuils de d√©tection si trop/peu de deals")
    
    # Afficher le calendrier du mois actuel
    current_month = datetime.now().strftime('%B')
    print(f"\n{Fore.CYAN}üìÖ Routes saisonni√®res actives en {current_month}:")
    
    # Simuler quelques routes saisonni√®res selon le mois
    month_num = datetime.now().month
    if month_num in [6, 7, 8]:
        seasonal_examples = [
            "CDG ‚Üí PMI (Palma de Majorque)",
            "CDG ‚Üí IBZ (Ibiza)",
            "CDG ‚Üí HER (H√©raklion)",
            "CDG ‚Üí DBV (Dubrovnik)"
        ]
        season = "√âT√â üå¥"
    elif month_num in [12, 1, 2]:
        seasonal_examples = [
            "CDG ‚Üí TFS (Tenerife)",
            "CDG ‚Üí VIE (Vienne - March√©s de No√´l)",
            "CDG ‚Üí GVA (Gen√®ve - Ski)",
            "CDG ‚Üí RAK (Marrakech)"
        ]
        season = "HIVER ‚õ∑Ô∏è"
    elif month_num in [3, 4, 5]:
        seasonal_examples = [
            "CDG ‚Üí AMS (Amsterdam - Tulipes)",
            "CDG ‚Üí BCN (Barcelone)",
            "CDG ‚Üí ROM (Rome - P√¢ques)",
            "CDG ‚Üí ATH (Ath√®nes)"
        ]
        season = "PRINTEMPS üå∏"
    else:
        seasonal_examples = [
            "CDG ‚Üí IST (Istanbul)",
            "CDG ‚Üí CAI (Le Caire)",
            "CDG ‚Üí FLR (Florence)",
            "CDG ‚Üí BKK (Bangkok)"
        ]
        season = "AUTOMNE üçÇ"
    
    print(f"\n   Saison: {season}")
    for route in seasonal_examples[:4]:
        print(f"   ‚Ä¢ {route}")


if __name__ == "__main__":
    main()